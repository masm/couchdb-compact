var crypto = require("crypto");
var fs = require("fs");
var path = require("path");

var exports = module.exports = {
    eachSync: eachSync,
    forEver: forEver,
    jsonToUrlQuery: jsonToUrlQuery,
    newId: newId,
    retryWithThrottling: retryWithThrottling,
    url: url,
    withFieldsChecked: withFieldsChecked,
    withJSONFromBody: withJSONFromBody,
    indexedByProperty: indexedByProperty,
    indexed: indexed,
    moveFile: moveFile,
    parseCSVString: parseCSVString
};

function eachSync (array, proc, callback) {
    var i = 0;
    var len = array.length;
    return seq(0);

    function seq(i) {
        if (i < len) {
            return proc(array[i], function () { seq(i+1); });
        } else {
            return callback();
        }
    }
}

function forEver (proc) {
    return function (callback) {
        proc(function (err, result) {
            if (err) {
                setTimeout(function() {
                    forEver(proc)(callback);
                }, 1000);
            } else {
                callback(err, result);
            }
        });
    };
}

function jsonToUrlQuery (obj) {
    var query = [];
    for (var key in obj) {
        var value = obj[key];
        query.push(key + "=" + encodeURIComponent(value));
    }
    return query.join("&");
}

function newId(salt) {
    salt = salt || "thissurelyisunique";
    return crypto.createHash("sha1").update("--[" + new Date().valueOf() + "]-[" + salt + "]-[" + Math.random() +"]--").digest("hex");
}

function retryWithThrottling (proc) {
    var delay = 500;

    proc(function retry () {
        setTimeout(function () {
            delay = Math.min(delay*2, 60000);
            proc(retry);
        }, delay);
    });
}

function url(path, obj) {
    var query = jsonToUrlQuery(obj);
    if (query === "") {
        return path;
    } else {
        return path + "?" + query;
    }
}

function withFieldsChecked(body, spec, callback) {
    return callback(checkFields(body, spec));
}

function checkFields(obj, fieldSpecs, type) {
    for (var i = 0; i < fieldSpecs.length; i++) {
        var fieldSpec = fieldSpecs[i];
        var fieldName, fieldType, cond, reason;
        cond   = fieldName = fieldSpec[0];
        reason = fieldType = fieldSpec[1];
        if (typeof cond == "boolean") {
            if (!cond) {
                return {error: "bad object", reason: reason};
            }
        } else if (typeof obj[fieldName] !== fieldType) {
            return {error: "bad object", reason: fieldName + " not provided or the wrong type"};
        }
    }
    return false;
}

function withJSONFromBody(callback) {
    return function(res) {
        var buffer = [];
        res.setEncoding("utf8");
        res.on("data", function(data) {
            buffer.push(data);
        });
        res.on("end", function() {
            var obj;
            try {
                obj = JSON.parse(buffer.join(""));
            } catch (e) {
                obj = { error: "internal server error", reason: "not an expected json body"};
            }
            callback(obj);
        });
    };
}

function indexedByProperty (array, property) {
    var d = {};
    array.forEach(function (e) {
        d[e[property]] = e;
    });
    return d;
};

function indexed (array) {
    var d = {};
    array.forEach(function (e) {
        d[e] = true;
    });
    return d;
};

function moveFile (src, dst, callback){
    fs.rename(src, dst, function (err) {
        if (!err) {
            callback();
        } else if (err.code !== "EXDEV") {
            callback(err);
        } else {
            fs.stat(src, function (err, stats) {
                if (err) {
                    callback(err);
                } else if (stats.isFile()) {
                    moveFile(src, dst, callback);
                } else { // TODO: handle if (stats.isDirectory())
                    err = new Error("src must be a file");
                    err.code = "NOTFILE";
                    callback(err);
                }
            });
        }
    });

    function moveFile (src, dst, callback) {
        fs.stat(dst, function (err, stats) {
            if (!err && stats.isDirectory()) {
                dst = path.resolve(dst, path.basename(src));
            } else {
                // do nothing
            }
            moveFileToFile(src, dst, callback);
        });
    }

    function moveFileToFile (src, dst, callback) {
        var ins, outs;
        ins = fs.createReadStream(src);
        outs = fs.createWriteStream(dst);
        ins.once("error", function (err) {
            outs.removeAllListeners("error");
            outs.removeAllListeners("close");
            outs.destroy();
            callback(err);
        });
        outs.once("error", function (err) {
            ins.removeAllListeners("error");
            outs.removeAllListeners("close");
            ins.destroy();
            callback(err);
        });
        outs.once("close", function () {
            fs.unlink(src, callback);
        });
        ins.pipe(outs);
    }
};

function parseCSVString (str, callback) {
    var lines = str.split(/\n|\r|\n\r|\r\n/);
    lines = lines.map(function (line) { return line.trim(); });
    lines = lines.filter(function (line) { return line !== ""; });

    var headers = lines[0].split(",");

    lines = lines.slice(1); // remove first (title) line
    var acc = [];
    var warnings = [];
    lines.forEach(function (line, idx) {
        parse(line, idx, function (json, warning) {
            json && acc.push(json.map(function (s) { return s.trim(); }).map(function (s) { return s.trim(); }));
            warning && warnings.push(warning);
        });
    });
    callback({
        json: acc,
        warnings: warnings,
        headers: headers
    });


    function parse (str, idx, callback) {
        var i = 0;
        var len = str.length;
        var acc = [];
        var chars = [];

        line();
        if (acc.length === headers.length) {
            callback(acc, null);
        } else {
            callback(null, createBadRowWarning(idx));
        }

        function line () {
            while (i < len) {
                if (str[i] === ",") {
                    acc.push(chars.join(""));
                    chars = [];
                    i += 1;
                } else if (str[i] === '"') {
                    i += 1;
                    if (i < len) {
                        if (str[i] === '"') {
                            i += 1;
                        } else {
                            inside();
                        }
                    } else {
                        chars.push('"');
                    }
                } else {
                    chars.push(str[i]);
                    i += 1;
                }
            }
            acc.push(chars.join(""));
            chars = [];
        }

        function inside () {
            while (i < len) {
                if (str[i] === '"') {
                    i += 1;
                    if (i < len) {
                        if (str[i] === '"') {
                            chars.push('"');
                            i += 1;
                        } else {
                            return;
                        }
                    } else {
                        return;
                    }
                } else {
                    chars.push(str[i]);
                    i += 1;
                }
            }
        }

        function createBadRowWarning () {
            return {
                row: idx + 1,
                columns: acc.length
            };
        }
    }
}
